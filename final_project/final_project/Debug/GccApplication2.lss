
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000a5a  00000aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800086  00800086  00000b14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002416  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cce  00000000  00000000  000031ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010f8  00000000  00000000  00003e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  00004f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c3f  00000000  00000000  00005430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000115f  00000000  00000000  0000606f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000071ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__vector_2>
   c:	0c 94 0b 04 	jmp	0x816	; 0x816 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 b6 04 	jmp	0x96c	; 0x96c <__vector_10>
  2c:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 39       	cpi	r26, 0x93	; 147
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a3 01 	call	0x346	; 0x346 <main>
  8a:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUZZER_Init>:
 * Created: 10/12/2021 1:59:39 PM
 *  Author: win7
 */ 
#include "BUZZER.h"
void BUZZER_Init(){
	DIO_SetDir(PORT_A,PIN_3,OUTPUT);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_SetDir>
  9c:	08 95       	ret

0000009e <BUZZER_ON>:
}
void BUZZER_ON(){
	DIO_SetHigh(PORT_A,PIN_3);
  9e:	63 e0       	ldi	r22, 0x03	; 3
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_SetHigh>
  a6:	08 95       	ret

000000a8 <BUZZER_OFF>:
}
void BUZZER_OFF(){
	DIO_SetLow(PORT_A,PIN_3);
  a8:	63 e0       	ldi	r22, 0x03	; 3
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_SetLow>
  b0:	08 95       	ret

000000b2 <LCD_WriteCMD>:
//	LCD_WriteCMD(0x01);
//	LCD_WriteCMD(0x06);
	*/
}
void LCD_WriteCMD(uint8 cmd)   /*Write command inside control register*/
{
  b2:	cf 93       	push	r28
  b4:	c8 2f       	mov	r28, r24
	/*RS is logic(0) to write inside control register*/
	DIO_SetLow(LCD_CMD_PORT, LCD_RS);
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_SetLow>
	/*RW is logic(0) to write on LCD*/
	DIO_SetLow(LCD_CMD_PORT, LCD_RW);
  be:	62 e0       	ldi	r22, 0x02	; 2
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_SetLow>
	/*To be sure of enable state before start operation*/
	DIO_SetLow(LCD_CMD_PORT, LCD_EN);
  c6:	63 e0       	ldi	r22, 0x03	; 3
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_SetLow>
	/*Send high nibble of command*/
	PORTA = (cmd & 0xF0) | (PORTA & 0x0F);
  ce:	8b b3       	in	r24, 0x1b	; 27
  d0:	9c 2f       	mov	r25, r28
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	89 2b       	or	r24, r25
  d8:	8b bb       	out	0x1b, r24	; 27
	DIO_SetHigh(LCD_CMD_PORT, LCD_EN);
  da:	63 e0       	ldi	r22, 0x03	; 3
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_SetHigh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_WriteCMD+0x34>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_WriteCMD+0x3a>
  ec:	00 00       	nop
	_delay_ms(1);
	DIO_SetLow(LCD_CMD_PORT, LCD_EN);
  ee:	63 e0       	ldi	r22, 0x03	; 3
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_SetLow>
	/*send low nibble of command*/
	PORTA = (cmd << 4) | (PORTA & 0x0F);
  f6:	20 e1       	ldi	r18, 0x10	; 16
  f8:	c2 9f       	mul	r28, r18
  fa:	c0 01       	movw	r24, r0
  fc:	11 24       	eor	r1, r1
  fe:	9b b3       	in	r25, 0x1b	; 27
 100:	9f 70       	andi	r25, 0x0F	; 15
 102:	89 2b       	or	r24, r25
 104:	8b bb       	out	0x1b, r24	; 27
	DIO_SetHigh(LCD_CMD_PORT, LCD_EN);
 106:	63 e0       	ldi	r22, 0x03	; 3
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_SetHigh>
 10e:	89 ef       	ldi	r24, 0xF9	; 249
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_WriteCMD+0x60>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_WriteCMD+0x66>
 118:	00 00       	nop
	_delay_ms(1);
	DIO_SetLow(LCD_CMD_PORT, LCD_EN);
 11a:	63 e0       	ldi	r22, 0x03	; 3
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_SetLow>
 122:	83 ef       	ldi	r24, 0xF3	; 243
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_WriteCMD+0x74>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <LCD_WriteCMD+0x7a>
 12c:	00 00       	nop
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <LCD_Init>:


void LCD_Init(void)/*Initialize LCD*/
{
	/*Define direction for command pins*/
	DIO_SetDir(LCD_CMD_PORT, LCD_RS, LCD_OUTPUT);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_SetDir>
	DIO_SetDir(LCD_CMD_PORT, LCD_RW, LCD_OUTPUT);
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	62 e0       	ldi	r22, 0x02	; 2
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_SetDir>
	DIO_SetDir(LCD_CMD_PORT, LCD_EN, LCD_OUTPUT);
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	63 e0       	ldi	r22, 0x03	; 3
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_SetDir>
	/*Define direction for data pins*/
	DIO_SetDir(LCD_DTA_PORT, LCD_D4, LCD_OUTPUT);
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	64 e0       	ldi	r22, 0x04	; 4
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_SetDir>
	DIO_SetDir(LCD_DTA_PORT, LCD_D5, LCD_OUTPUT);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	65 e0       	ldi	r22, 0x05	; 5
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_SetDir>
	DIO_SetDir(LCD_DTA_PORT, LCD_D6, LCD_OUTPUT);
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	66 e0       	ldi	r22, 0x06	; 6
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_SetDir>
	DIO_SetDir(LCD_DTA_PORT, LCD_D7, LCD_OUTPUT);
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	67 e0       	ldi	r22, 0x07	; 7
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_SetDir>
 178:	8b e4       	ldi	r24, 0x4B	; 75
 17a:	9d e1       	ldi	r25, 0x1D	; 29
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_Init+0x4a>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_Init+0x50>
 182:	00 00       	nop
	/*LCD controller is slower than MC speed*/
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Return Home  */
	LCD_WriteCMD(LCD_HOME_CMD);
 184:	82 e0       	ldi	r24, 0x02	; 2
 186:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCMD>
 18a:	85 ea       	ldi	r24, 0xA5	; 165
 18c:	9e e0       	ldi	r25, 0x0E	; 14
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <LCD_Init+0x5c>
 192:	00 c0       	rjmp	.+0      	; 0x194 <LCD_Init+0x62>
 194:	00 00       	nop
	_delay_ms(15);

	/* Function Set  */
	LCD_WriteCMD(LCD_FUNCTION_SET_CMD);
 196:	88 e2       	ldi	r24, 0x28	; 40
 198:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCMD>
 19c:	89 ef       	ldi	r24, 0xF9	; 249
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_Init+0x6e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_Init+0x74>
 1a6:	00 00       	nop
	_delay_ms(1);

	/* Display ON / OFF Control */
	LCD_WriteCMD(LCD_CONTROL_CMD);
 1a8:	8e e0       	ldi	r24, 0x0E	; 14
 1aa:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCMD>
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCD_Init+0x80>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <LCD_Init+0x86>
 1b8:	00 00       	nop
	_delay_ms(1);

	/* Clear Display */
	LCD_WriteCMD(LCD_CLEAR_CMD);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCMD>
 1c0:	85 ea       	ldi	r24, 0xA5	; 165
 1c2:	9e e0       	ldi	r25, 0x0E	; 14
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_Init+0x92>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_Init+0x98>
 1ca:	00 00       	nop
	_delay_ms(15);

	/* Entry Mode Set  */
	LCD_WriteCMD(LCD_MODE_CMD);
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCMD>
 1d2:	83 ef       	ldi	r24, 0xF3	; 243
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <LCD_Init+0xa4>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <LCD_Init+0xaa>
 1dc:	00 00       	nop
 1de:	08 95       	ret

000001e0 <LCD_WriteChar>:
	DIO_SetLow(LCD_CMD_PORT, LCD_EN);
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
void LCD_WriteChar(uint8 data)/*write data inside data register*/
{
 1e0:	cf 93       	push	r28
 1e2:	c8 2f       	mov	r28, r24
	/*RS is logic(1) to write inside data register*/
	DIO_SetHigh(LCD_CMD_PORT, LCD_RS);
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_SetHigh>
	/*RW is logic(0) to write on LCD*/
	DIO_SetLow(LCD_CMD_PORT, LCD_RW);
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_SetLow>
	/*To be sure of enable state before start operation*/
	DIO_SetLow(LCD_CMD_PORT, LCD_EN);
 1f4:	63 e0       	ldi	r22, 0x03	; 3
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_SetLow>
	/*Send high nibble of command*/
	PORTA = (data & 0xF0) | (PORTA & 0x0F);
 1fc:	8b b3       	in	r24, 0x1b	; 27
 1fe:	9c 2f       	mov	r25, r28
 200:	90 7f       	andi	r25, 0xF0	; 240
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	89 2b       	or	r24, r25
 206:	8b bb       	out	0x1b, r24	; 27
	DIO_SetHigh(LCD_CMD_PORT, LCD_EN);
 208:	63 e0       	ldi	r22, 0x03	; 3
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_SetHigh>
 210:	89 ef       	ldi	r24, 0xF9	; 249
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <LCD_WriteChar+0x34>
 218:	00 c0       	rjmp	.+0      	; 0x21a <LCD_WriteChar+0x3a>
 21a:	00 00       	nop
	_delay_ms(1);
	DIO_SetLow(LCD_CMD_PORT, LCD_EN);
 21c:	63 e0       	ldi	r22, 0x03	; 3
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_SetLow>
	/*send low nibble of command*/
	PORTA = (data << 4) | (PORTA & 0x0F);
 224:	20 e1       	ldi	r18, 0x10	; 16
 226:	c2 9f       	mul	r28, r18
 228:	c0 01       	movw	r24, r0
 22a:	11 24       	eor	r1, r1
 22c:	9b b3       	in	r25, 0x1b	; 27
 22e:	9f 70       	andi	r25, 0x0F	; 15
 230:	89 2b       	or	r24, r25
 232:	8b bb       	out	0x1b, r24	; 27
	DIO_SetHigh(LCD_CMD_PORT, LCD_EN);
 234:	63 e0       	ldi	r22, 0x03	; 3
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 72 03 	call	0x6e4	; 0x6e4 <DIO_SetHigh>
 23c:	89 ef       	ldi	r24, 0xF9	; 249
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_WriteChar+0x60>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_WriteChar+0x66>
 246:	00 00       	nop
	_delay_ms(1);
	DIO_SetLow(LCD_CMD_PORT, LCD_EN);
 248:	63 e0       	ldi	r22, 0x03	; 3
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 a6 03 	call	0x74c	; 0x74c <DIO_SetLow>
 250:	83 ef       	ldi	r24, 0xF3	; 243
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <LCD_WriteChar+0x74>
 258:	00 c0       	rjmp	.+0      	; 0x25a <LCD_WriteChar+0x7a>
 25a:	00 00       	nop
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <LCD_WriteString>:
void LCD_WriteString(uint8 string[])/*write string on screen*/
{
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ec 01       	movw	r28, r24
	while(*string != '\0')
 266:	03 c0       	rjmp	.+6      	; 0x26e <LCD_WriteString+0xe>
	{
		LCD_WriteChar(*string);
 268:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_WriteChar>
		string++;
 26c:	21 96       	adiw	r28, 0x01	; 1
	/*Delay for 2 millisecond*/
	_delay_ms(2);
}
void LCD_WriteString(uint8 string[])/*write string on screen*/
{
	while(*string != '\0')
 26e:	88 81       	ld	r24, Y
 270:	81 11       	cpse	r24, r1
 272:	fa cf       	rjmp	.-12     	; 0x268 <LCD_WriteString+0x8>
	{
		LCD_WriteChar(*string);
		string++;
	}
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <LCD_WriteNumbers>:
void LCD_WriteNumbers(uint32 numbr)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	2a 97       	sbiw	r28, 0x0a	; 10
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
	uint8 num[10];
	ltoa(numbr, (uint8*)num, 10);//Long to Ascii
 28e:	2a e0       	ldi	r18, 0x0A	; 10
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	ae 01       	movw	r20, r28
 294:	4f 5f       	subi	r20, 0xFF	; 255
 296:	5f 4f       	sbci	r21, 0xFF	; 255
 298:	0e 94 df 04 	call	0x9be	; 0x9be <ltoa>
	LCD_WriteString(num);
 29c:	ce 01       	movw	r24, r28
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	0e 94 30 01 	call	0x260	; 0x260 <LCD_WriteString>
}
 2a4:	2a 96       	adiw	r28, 0x0a	; 10
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <LCD_Clear>:
void LCD_Clear(void)/*Clear data display on screen*/
{
	LCD_WriteCMD(0x01);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCMD>
 2bc:	08 95       	ret

000002be <LCD_WriteAtPosition>:
}

void LCD_WriteAtPosition(uint8 lineNumber , uint8 digitNumber)
{
	if ( (digitNumber>0 && digitNumber<=15) && (lineNumber>1 && lineNumber<=2) )
 2be:	9f ef       	ldi	r25, 0xFF	; 255
 2c0:	96 0f       	add	r25, r22
 2c2:	9f 30       	cpi	r25, 0x0F	; 15
 2c4:	80 f4       	brcc	.+32     	; 0x2e6 <LCD_WriteAtPosition+0x28>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	71 f4       	brne	.+28     	; 0x2e6 <LCD_WriteAtPosition+0x28>
	{
	    switch(lineNumber)
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	19 f0       	breq	.+6      	; 0x2d4 <LCD_WriteAtPosition+0x16>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	31 f0       	breq	.+12     	; 0x2de <LCD_WriteAtPosition+0x20>
 2d2:	08 95       	ret
	    {
		    case 1:
		    	LCD_WriteCMD(digitNumber+127);   // 127 (0x80) if the offset address of line 1 in DDRAM at LM06
 2d4:	8f e7       	ldi	r24, 0x7F	; 127
 2d6:	86 0f       	add	r24, r22
 2d8:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCMD>
		    break;
 2dc:	08 95       	ret
		    case 2:
		    	LCD_WriteCMD(digitNumber+191);	// 191 (0xBF) if the offset address of line 1 in DDRAM at LM06
 2de:	8f eb       	ldi	r24, 0xBF	; 191
 2e0:	86 0f       	add	r24, r22
 2e2:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_WriteCMD>
 2e6:	08 95       	ret

000002e8 <SWITCH_Init>:
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	51 f0       	breq	.+20     	; 0x300 <SWITCH_Init+0x18>
 2ec:	18 f0       	brcs	.+6      	; 0x2f4 <SWITCH_Init+0xc>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	69 f0       	breq	.+26     	; 0x30c <SWITCH_Init+0x24>
 2f2:	08 95       	ret
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_SetDir>
 2fe:	08 95       	ret
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	66 e0       	ldi	r22, 0x06	; 6
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_SetDir>
 30a:	08 95       	ret
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	62 e0       	ldi	r22, 0x02	; 2
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_SetDir>
 316:	08 95       	ret

00000318 <SWITCH_Read>:
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	49 f0       	breq	.+18     	; 0x32e <SWITCH_Read+0x16>
 31c:	18 f0       	brcs	.+6      	; 0x324 <SWITCH_Read+0xc>
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	59 f0       	breq	.+22     	; 0x338 <SWITCH_Read+0x20>
 322:	0f c0       	rjmp	.+30     	; 0x342 <SWITCH_Read+0x2a>
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 33 03 	call	0x666	; 0x666 <DIO_GetValue>
 32c:	08 95       	ret
 32e:	66 e0       	ldi	r22, 0x06	; 6
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	0e 94 33 03 	call	0x666	; 0x666 <DIO_GetValue>
 336:	08 95       	ret
 338:	62 e0       	ldi	r22, 0x02	; 2
 33a:	83 e0       	ldi	r24, 0x03	; 3
 33c:	0e 94 33 03 	call	0x666	; 0x666 <DIO_GetValue>
 340:	08 95       	ret
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret

00000346 <main>:
void Timer0_OC_ISR_Cbk(void);
static volatile uint8 TEMP_counter=0;
int counter  =0;

int main()
{
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	00 d0       	rcall	.+0      	; 0x34c <main+0x6>
 34c:	00 d0       	rcall	.+0      	; 0x34e <main+0x8>
 34e:	00 d0       	rcall	.+0      	; 0x350 <main+0xa>
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
//EXT_INTERRUPT0_Init();

	LCD_Init();
 354:	0e 94 99 00 	call	0x132	; 0x132 <LCD_Init>
	LCD_Clear;
//TIMER_Init(TIMER0,NORMAL,Disconnected,NO_PRESCALING,TOVF_enable,OCR_enable);
SWITCH_Init(SWITCH_2);
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <SWITCH_Init>
ADC_Init(VREF_AVCC,ADC_SCALLER_8);
 35e:	63 e0       	ldi	r22, 0x03	; 3
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 87 02 	call	0x50e	; 0x50e <ADC_Init>
int x,swi,temp;	
BUZZER_Init();
 366:	0e 94 49 00 	call	0x92	; 0x92 <BUZZER_Init>
//SET_TMR0_OVF_INT_ISR_Handler( 59);
TIMER_Paramter_t ti;
ti.Timer_Channel=TIMER0;
 36a:	19 82       	std	Y+1, r1	; 0x01
ti.Timer_Mode=NORMAL;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	8a 83       	std	Y+2, r24	; 0x02
ti.Timer_Prescale=PRESCALING_CLK1024;
 370:	95 e0       	ldi	r25, 0x05	; 5
 372:	9c 83       	std	Y+4, r25	; 0x04
ti.Timer_OVF_Interrupt=TOVF_enable;
 374:	8d 83       	std	Y+5, r24	; 0x05
ti.Timer_OCR_Interrupt=OCR_disable;
 376:	1e 82       	std	Y+6, r1	; 0x06
ti.COM_Pin=Disconnected;
 378:	1b 82       	std	Y+3, r1	; 0x03
TIMER_Init(ti);
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	51 e0       	ldi	r21, 0x01	; 1
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	75 e0       	ldi	r23, 0x05	; 5
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 4a 04 	call	0x894	; 0x894 <TIMER_Init>
TIMER_Set_Counter_Value(TIMER0,250);
 388:	6a ef       	ldi	r22, 0xFA	; 250
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	0e 94 89 04 	call	0x912	; 0x912 <TIMER_Set_Counter_Value>
//SET_TMR0_OVF_INT_ISR_Handler(Timer0_OC_ISR_Cbk);
EXT_INTERRUPT0_Init();
 392:	0e 94 3c 04 	call	0x878	; 0x878 <EXT_INTERRUPT0_Init>

	while(1)
	{
		//for(x=0;x<59;x++){
	//	x=TIMER_Read_Counter_Value(TIMER0);
		swi=SWITCH_Read(SWITCH_0);
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 8c 01 	call	0x318	; 0x318 <SWITCH_Read>
 39c:	90 e0       	ldi	r25, 0x00	; 0
		
		if(OVFcounter>=250&&swi==1){
 39e:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <OVFcounter>
 3a2:	2a 3f       	cpi	r18, 0xFA	; 250
 3a4:	98 f1       	brcs	.+102    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	91 05       	cpc	r25, r1
 3aa:	81 f5       	brne	.+96     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			OVFcounter=0;
 3ac:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <OVFcounter>
		if(counter<=59){
 3b0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 3b4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 3b8:	8c 33       	cpi	r24, 0x3C	; 60
 3ba:	91 05       	cpc	r25, r1
 3bc:	2c f4       	brge	.+10     	; 0x3c8 <main+0x82>
			counter++;
 3be:	01 96       	adiw	r24, 0x01	; 1
 3c0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__data_end+0x1>
 3c4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
		_delay_ms(100);
		LCD_WriteString('C');
		_delay_ms(100);
		BUZZER_OFF();*/
		}
		counter++;
 3c8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 3cc:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__data_end+0x1>
 3d6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
		BUZZER_ON();
 3da:	0e 94 4f 00 	call	0x9e	; 0x9e <BUZZER_ON>
		LCD_Clear();
 3de:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Clear>
 3e2:	87 ea       	ldi	r24, 0xA7	; 167
 3e4:	91 e6       	ldi	r25, 0x61	; 97
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <main+0xa0>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <main+0xa6>
 3ec:	00 00       	nop
		_delay_ms(100);
		LCD_WriteAtPosition(1,1);
 3ee:	61 e0       	ldi	r22, 0x01	; 1
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_WriteAtPosition>
 3f6:	87 ea       	ldi	r24, 0xA7	; 167
 3f8:	91 e6       	ldi	r25, 0x61	; 97
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <main+0xb4>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
		_delay_ms(100);
		LCD_WriteString("Door opened");}
 402:	80 e6       	ldi	r24, 0x60	; 96
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 30 01 	call	0x260	; 0x260 <LCD_WriteString>
 40a:	c5 cf       	rjmp	.-118    	; 0x396 <main+0x50>
		else if(OVFcounter>=250&&swi==0){
 40c:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <OVFcounter>
 410:	2a 3f       	cpi	r18, 0xFA	; 250
 412:	08 f2       	brcs	.-126    	; 0x396 <main+0x50>
 414:	89 2b       	or	r24, r25
 416:	09 f0       	breq	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 418:	be cf       	rjmp	.-132    	; 0x396 <main+0x50>
			OVFcounter=0;
 41a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <OVFcounter>
			if(counter<=59){
 41e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 422:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__data_end+0x1>
 426:	8c 33       	cpi	r24, 0x3C	; 60
 428:	91 05       	cpc	r25, r1
 42a:	0c f0       	brlt	.+2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42c:	6b c0       	rjmp	.+214    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
				counter++;
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__data_end+0x1>
 434:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
				LCD_Clear();
 438:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <LCD_Clear>
 43c:	8f e4       	ldi	r24, 0x4F	; 79
 43e:	93 ec       	ldi	r25, 0xC3	; 195
 440:	01 97       	sbiw	r24, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 446:	00 00       	nop
				_delay_ms(200);
				LCD_WriteAtPosition(1,1);
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_WriteAtPosition>
 450:	87 ea       	ldi	r24, 0xA7	; 167
 452:	91 e6       	ldi	r25, 0x61	; 97
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
				_delay_ms(100);
				LCD_WriteString("Time = ");
 45c:	8c e6       	ldi	r24, 0x6C	; 108
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 30 01 	call	0x260	; 0x260 <LCD_WriteString>
 464:	87 ea       	ldi	r24, 0xA7	; 167
 466:	91 e6       	ldi	r25, 0x61	; 97
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46e:	00 00       	nop
				_delay_ms(100);
				LCD_WriteNumbers(counter);
 470:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__data_end>
 474:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__data_end+0x1>
 478:	07 2e       	mov	r0, r23
 47a:	00 0c       	add	r0, r0
 47c:	88 0b       	sbc	r24, r24
 47e:	99 0b       	sbc	r25, r25
 480:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_WriteNumbers>
 484:	87 ea       	ldi	r24, 0xA7	; 167
 486:	91 e6       	ldi	r25, 0x61	; 97
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	f1 f7       	brne	.-4      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 48c:	00 c0       	rjmp	.+0      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48e:	00 00       	nop
				_delay_ms(100);
				LCD_WriteString("sec");
 490:	84 e7       	ldi	r24, 0x74	; 116
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 30 01 	call	0x260	; 0x260 <LCD_WriteString>
 498:	87 ea       	ldi	r24, 0xA7	; 167
 49a:	91 e6       	ldi	r25, 0x61	; 97
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a2:	00 00       	nop
				_delay_ms(100);
				LCD_WriteAtPosition(2,1);
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	0e 94 5f 01 	call	0x2be	; 0x2be <LCD_WriteAtPosition>
 4ac:	87 ea       	ldi	r24, 0xA7	; 167
 4ae:	91 e6       	ldi	r25, 0x61	; 97
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b6:	00 00       	nop
				_delay_ms(100);
				LCD_WriteString("Tempreture =");
 4b8:	88 e7       	ldi	r24, 0x78	; 120
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 30 01 	call	0x260	; 0x260 <LCD_WriteString>
 4c0:	87 ea       	ldi	r24, 0xA7	; 167
 4c2:	91 e6       	ldi	r25, 0x61	; 97
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4ca:	00 00       	nop
				_delay_ms(100);
				temp=ADC_ReadChannel_Block(CH_1);
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	0e 94 ab 02 	call	0x556	; 0x556 <ADC_ReadChannel_Block>
				LCD_WriteNumbers(temp);
 4d2:	bc 01       	movw	r22, r24
 4d4:	99 0f       	add	r25, r25
 4d6:	88 0b       	sbc	r24, r24
 4d8:	99 0b       	sbc	r25, r25
 4da:	0e 94 3d 01 	call	0x27a	; 0x27a <LCD_WriteNumbers>
 4de:	87 ea       	ldi	r24, 0xA7	; 167
 4e0:	91 e6       	ldi	r25, 0x61	; 97
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4e8:	00 00       	nop
				_delay_ms(100);
				LCD_WriteString('C');
 4ea:	83 e4       	ldi	r24, 0x43	; 67
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 30 01 	call	0x260	; 0x260 <LCD_WriteString>
 4f2:	87 ea       	ldi	r24, 0xA7	; 167
 4f4:	91 e6       	ldi	r25, 0x61	; 97
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
 4fc:	00 00       	nop
				_delay_ms(100);
				BUZZER_OFF();
 4fe:	0e 94 54 00 	call	0xa8	; 0xa8 <BUZZER_OFF>
 502:	49 cf       	rjmp	.-366    	; 0x396 <main+0x50>
			}
			else{
				counter=0;
 504:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__data_end+0x1>
 508:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
 50c:	44 cf       	rjmp	.-376    	; 0x396 <main+0x50>

0000050e <ADC_Init>:

void ADC_Init(ADC_Vref_type vref,ADC_scallertype scaller)
{

	// select voltage refrence
	switch(vref)
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	59 f0       	breq	.+22     	; 0x528 <ADC_Init+0x1a>
 512:	18 f0       	brcs	.+6      	; 0x51a <ADC_Init+0xc>
 514:	82 30       	cpi	r24, 0x02	; 2
 516:	79 f0       	breq	.+30     	; 0x536 <ADC_Init+0x28>
 518:	14 c0       	rjmp	.+40     	; 0x542 <ADC_Init+0x34>
	{
		case VREF_AREF:
		clr_bit(ADMUX,REFS1);
 51a:	87 b1       	in	r24, 0x07	; 7
 51c:	8f 77       	andi	r24, 0x7F	; 127
 51e:	87 b9       	out	0x07, r24	; 7
		clr_bit(ADMUX,REFS0);
 520:	87 b1       	in	r24, 0x07	; 7
 522:	8f 7b       	andi	r24, 0xBF	; 191
 524:	87 b9       	out	0x07, r24	; 7
		break;
 526:	0d c0       	rjmp	.+26     	; 0x542 <ADC_Init+0x34>
		case VREF_AVCC:
		clr_bit(ADMUX,REFS1);
 528:	87 b1       	in	r24, 0x07	; 7
 52a:	8f 77       	andi	r24, 0x7F	; 127
 52c:	87 b9       	out	0x07, r24	; 7
		set_bit(ADMUX,REFS0);
 52e:	87 b1       	in	r24, 0x07	; 7
 530:	80 64       	ori	r24, 0x40	; 64
 532:	87 b9       	out	0x07, r24	; 7
		break;
 534:	06 c0       	rjmp	.+12     	; 0x542 <ADC_Init+0x34>
		case VREF_256V:
		set_bit(ADMUX,REFS1);
 536:	87 b1       	in	r24, 0x07	; 7
 538:	80 68       	ori	r24, 0x80	; 128
 53a:	87 b9       	out	0x07, r24	; 7
		set_bit(ADMUX,REFS0);
 53c:	87 b1       	in	r24, 0x07	; 7
 53e:	80 64       	ori	r24, 0x40	; 64
 540:	87 b9       	out	0x07, r24	; 7
		break;
	}

	 // set adjustment
	clr_bit(ADMUX,ADLAR);
 542:	87 b1       	in	r24, 0x07	; 7
 544:	8f 7d       	andi	r24, 0xDF	; 223
 546:	87 b9       	out	0x07, r24	; 7

	// set prescaller
	ADCSRA |= scaller;
 548:	86 b1       	in	r24, 0x06	; 6
 54a:	68 2b       	or	r22, r24
 54c:	66 b9       	out	0x06, r22	; 6

	//ADC_Enable
	set_bit(ADCSRA,ADEN);
 54e:	86 b1       	in	r24, 0x06	; 6
 550:	80 68       	ori	r24, 0x80	; 128
 552:	86 b9       	out	0x06, r24	; 6
 554:	08 95       	ret

00000556 <ADC_ReadChannel_Block>:

uint16 ADC_ReadChannel_Block(ADC_channel_type channel)
{

	// set read channel as input
	clr_bit(DDRA,channel);
 556:	9a b3       	in	r25, 0x1a	; 26
 558:	21 e0       	ldi	r18, 0x01	; 1
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	08 2e       	mov	r0, r24
 55e:	02 c0       	rjmp	.+4      	; 0x564 <ADC_ReadChannel_Block+0xe>
 560:	22 0f       	add	r18, r18
 562:	33 1f       	adc	r19, r19
 564:	0a 94       	dec	r0
 566:	e2 f7       	brpl	.-8      	; 0x560 <ADC_ReadChannel_Block+0xa>
 568:	20 95       	com	r18
 56a:	29 23       	and	r18, r25
 56c:	2a bb       	out	0x1a, r18	; 26

	// select read channel.
	ADMUX |=channel;
 56e:	97 b1       	in	r25, 0x07	; 7
 570:	89 2b       	or	r24, r25
 572:	87 b9       	out	0x07, r24	; 7

	// start manual conversion
	set_bit(ADCSRA,ADSC);
 574:	86 b1       	in	r24, 0x06	; 6
 576:	80 64       	ori	r24, 0x40	; 64
 578:	86 b9       	out	0x06, r24	; 6

	// polling wait for complete conversion "Blocking"
	while(!get_bit(ADCSRA,ADIF));
 57a:	34 9b       	sbis	0x06, 4	; 6
 57c:	fe cf       	rjmp	.-4      	; 0x57a <ADC_ReadChannel_Block+0x24>

	//adc_val=((uint16)ADCH<<8)|ADCL;
	return ADC;
 57e:	84 b1       	in	r24, 0x04	; 4
 580:	95 b1       	in	r25, 0x05	; 5
	//return adc_val;
}
 582:	08 95       	ret

00000584 <DIO_SetDir>:
 584:	41 30       	cpi	r20, 0x01	; 1
 586:	a9 f5       	brne	.+106    	; 0x5f2 <DIO_SetDir+0x6e>
 588:	81 11       	cpse	r24, r1
 58a:	0b c0       	rjmp	.+22     	; 0x5a2 <DIO_SetDir+0x1e>
 58c:	2a b3       	in	r18, 0x1a	; 26
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_SetDir+0x14>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	6a 95       	dec	r22
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_SetDir+0x10>
 59c:	82 2b       	or	r24, r18
 59e:	8a bb       	out	0x1a, r24	; 26
 5a0:	08 95       	ret
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	59 f4       	brne	.+22     	; 0x5bc <DIO_SetDir+0x38>
 5a6:	27 b3       	in	r18, 0x17	; 23
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_SetDir+0x2e>
 5ae:	88 0f       	add	r24, r24
 5b0:	99 1f       	adc	r25, r25
 5b2:	6a 95       	dec	r22
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_SetDir+0x2a>
 5b6:	82 2b       	or	r24, r18
 5b8:	87 bb       	out	0x17, r24	; 23
 5ba:	08 95       	ret
 5bc:	82 30       	cpi	r24, 0x02	; 2
 5be:	59 f4       	brne	.+22     	; 0x5d6 <DIO_SetDir+0x52>
 5c0:	24 b3       	in	r18, 0x14	; 20
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_SetDir+0x48>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_SetDir+0x44>
 5d0:	82 2b       	or	r24, r18
 5d2:	84 bb       	out	0x14, r24	; 20
 5d4:	08 95       	ret
 5d6:	83 30       	cpi	r24, 0x03	; 3
 5d8:	09 f0       	breq	.+2      	; 0x5dc <DIO_SetDir+0x58>
 5da:	44 c0       	rjmp	.+136    	; 0x664 <DIO_SetDir+0xe0>
 5dc:	21 b3       	in	r18, 0x11	; 17
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_SetDir+0x64>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_SetDir+0x60>
 5ec:	82 2b       	or	r24, r18
 5ee:	81 bb       	out	0x11, r24	; 17
 5f0:	08 95       	ret
 5f2:	41 11       	cpse	r20, r1
 5f4:	37 c0       	rjmp	.+110    	; 0x664 <DIO_SetDir+0xe0>
 5f6:	81 11       	cpse	r24, r1
 5f8:	0c c0       	rjmp	.+24     	; 0x612 <DIO_SetDir+0x8e>
 5fa:	2a b3       	in	r18, 0x1a	; 26
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_SetDir+0x82>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_SetDir+0x7e>
 60a:	80 95       	com	r24
 60c:	82 23       	and	r24, r18
 60e:	8a bb       	out	0x1a, r24	; 26
 610:	08 95       	ret
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	61 f4       	brne	.+24     	; 0x62e <DIO_SetDir+0xaa>
 616:	27 b3       	in	r18, 0x17	; 23
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_SetDir+0x9e>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	6a 95       	dec	r22
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_SetDir+0x9a>
 626:	80 95       	com	r24
 628:	82 23       	and	r24, r18
 62a:	87 bb       	out	0x17, r24	; 23
 62c:	08 95       	ret
 62e:	82 30       	cpi	r24, 0x02	; 2
 630:	61 f4       	brne	.+24     	; 0x64a <DIO_SetDir+0xc6>
 632:	24 b3       	in	r18, 0x14	; 20
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_SetDir+0xba>
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_SetDir+0xb6>
 642:	80 95       	com	r24
 644:	82 23       	and	r24, r18
 646:	84 bb       	out	0x14, r24	; 20
 648:	08 95       	ret
 64a:	83 30       	cpi	r24, 0x03	; 3
 64c:	59 f4       	brne	.+22     	; 0x664 <DIO_SetDir+0xe0>
 64e:	21 b3       	in	r18, 0x11	; 17
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_SetDir+0xd6>
 656:	88 0f       	add	r24, r24
 658:	99 1f       	adc	r25, r25
 65a:	6a 95       	dec	r22
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_SetDir+0xd2>
 65e:	80 95       	com	r24
 660:	82 23       	and	r24, r18
 662:	81 bb       	out	0x11, r24	; 17
 664:	08 95       	ret

00000666 <DIO_GetValue>:
 666:	81 11       	cpse	r24, r1
 668:	0d c0       	rjmp	.+26     	; 0x684 <DIO_GetValue+0x1e>
 66a:	89 b3       	in	r24, 0x19	; 25
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_GetValue+0x14>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_GetValue+0x10>
 67e:	82 23       	and	r24, r18
 680:	93 23       	and	r25, r19
 682:	08 95       	ret
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	69 f4       	brne	.+26     	; 0x6a2 <DIO_GetValue+0x3c>
 688:	86 b3       	in	r24, 0x16	; 22
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_GetValue+0x32>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	6a 95       	dec	r22
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_GetValue+0x2e>
 69c:	82 23       	and	r24, r18
 69e:	93 23       	and	r25, r19
 6a0:	08 95       	ret
 6a2:	82 30       	cpi	r24, 0x02	; 2
 6a4:	69 f4       	brne	.+26     	; 0x6c0 <DIO_GetValue+0x5a>
 6a6:	83 b3       	in	r24, 0x13	; 19
 6a8:	28 2f       	mov	r18, r24
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_GetValue+0x50>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	6a 95       	dec	r22
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_GetValue+0x4c>
 6ba:	82 23       	and	r24, r18
 6bc:	93 23       	and	r25, r19
 6be:	08 95       	ret
 6c0:	83 30       	cpi	r24, 0x03	; 3
 6c2:	69 f4       	brne	.+26     	; 0x6de <DIO_GetValue+0x78>
 6c4:	80 b3       	in	r24, 0x10	; 16
 6c6:	28 2f       	mov	r18, r24
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_GetValue+0x6e>
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	6a 95       	dec	r22
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_GetValue+0x6a>
 6d8:	82 23       	and	r24, r18
 6da:	93 23       	and	r25, r19
 6dc:	08 95       	ret
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	08 95       	ret

000006e4 <DIO_SetHigh>:
 6e4:	81 11       	cpse	r24, r1
 6e6:	0b c0       	rjmp	.+22     	; 0x6fe <DIO_SetHigh+0x1a>
 6e8:	2b b3       	in	r18, 0x1b	; 27
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <DIO_SetHigh+0x10>
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	6a 95       	dec	r22
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <DIO_SetHigh+0xc>
 6f8:	82 2b       	or	r24, r18
 6fa:	8b bb       	out	0x1b, r24	; 27
 6fc:	08 95       	ret
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	59 f4       	brne	.+22     	; 0x718 <DIO_SetHigh+0x34>
 702:	28 b3       	in	r18, 0x18	; 24
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_SetHigh+0x2a>
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	6a 95       	dec	r22
 710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_SetHigh+0x26>
 712:	82 2b       	or	r24, r18
 714:	88 bb       	out	0x18, r24	; 24
 716:	08 95       	ret
 718:	82 30       	cpi	r24, 0x02	; 2
 71a:	59 f4       	brne	.+22     	; 0x732 <DIO_SetHigh+0x4e>
 71c:	25 b3       	in	r18, 0x15	; 21
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_SetHigh+0x44>
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	6a 95       	dec	r22
 72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_SetHigh+0x40>
 72c:	82 2b       	or	r24, r18
 72e:	85 bb       	out	0x15, r24	; 21
 730:	08 95       	ret
 732:	83 30       	cpi	r24, 0x03	; 3
 734:	51 f4       	brne	.+20     	; 0x74a <DIO_SetHigh+0x66>
 736:	22 b3       	in	r18, 0x12	; 18
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_SetHigh+0x5e>
 73e:	88 0f       	add	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	6a 95       	dec	r22
 744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_SetHigh+0x5a>
 746:	82 2b       	or	r24, r18
 748:	82 bb       	out	0x12, r24	; 18
 74a:	08 95       	ret

0000074c <DIO_SetLow>:
 74c:	81 11       	cpse	r24, r1
 74e:	0c c0       	rjmp	.+24     	; 0x768 <DIO_SetLow+0x1c>
 750:	2b b3       	in	r18, 0x1b	; 27
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	02 c0       	rjmp	.+4      	; 0x75c <DIO_SetLow+0x10>
 758:	88 0f       	add	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	6a 95       	dec	r22
 75e:	e2 f7       	brpl	.-8      	; 0x758 <DIO_SetLow+0xc>
 760:	80 95       	com	r24
 762:	82 23       	and	r24, r18
 764:	8b bb       	out	0x1b, r24	; 27
 766:	08 95       	ret
 768:	81 30       	cpi	r24, 0x01	; 1
 76a:	61 f4       	brne	.+24     	; 0x784 <DIO_SetLow+0x38>
 76c:	28 b3       	in	r18, 0x18	; 24
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_SetLow+0x2c>
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	6a 95       	dec	r22
 77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_SetLow+0x28>
 77c:	80 95       	com	r24
 77e:	82 23       	and	r24, r18
 780:	88 bb       	out	0x18, r24	; 24
 782:	08 95       	ret
 784:	82 30       	cpi	r24, 0x02	; 2
 786:	61 f4       	brne	.+24     	; 0x7a0 <DIO_SetLow+0x54>
 788:	25 b3       	in	r18, 0x15	; 21
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <DIO_SetLow+0x48>
 790:	88 0f       	add	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	6a 95       	dec	r22
 796:	e2 f7       	brpl	.-8      	; 0x790 <DIO_SetLow+0x44>
 798:	80 95       	com	r24
 79a:	82 23       	and	r24, r18
 79c:	85 bb       	out	0x15, r24	; 21
 79e:	08 95       	ret
 7a0:	83 30       	cpi	r24, 0x03	; 3
 7a2:	59 f4       	brne	.+22     	; 0x7ba <DIO_SetLow+0x6e>
 7a4:	22 b3       	in	r18, 0x12	; 18
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_SetLow+0x64>
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	6a 95       	dec	r22
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_SetLow+0x60>
 7b4:	80 95       	com	r24
 7b6:	82 23       	and	r24, r18
 7b8:	82 bb       	out	0x12, r24	; 18
 7ba:	08 95       	ret

000007bc <__vector_2>:
//
//}

/*Interrupt Service Routine for INT1*/
ISR(INT1_vect)
{
 7bc:	1f 92       	push	r1
 7be:	0f 92       	push	r0
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	0f 92       	push	r0
 7c4:	11 24       	eor	r1, r1
 7c6:	2f 93       	push	r18
 7c8:	3f 93       	push	r19
 7ca:	4f 93       	push	r20
 7cc:	5f 93       	push	r21
 7ce:	6f 93       	push	r22
 7d0:	7f 93       	push	r23
 7d2:	8f 93       	push	r24
 7d4:	9f 93       	push	r25
 7d6:	af 93       	push	r26
 7d8:	bf 93       	push	r27
 7da:	ef 93       	push	r30
 7dc:	ff 93       	push	r31

	if(EXT_INT1_ISR != NULL)
 7de:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <EXT_INT1_ISR>
 7e2:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <EXT_INT1_ISR+0x1>
 7e6:	89 2b       	or	r24, r25
 7e8:	29 f0       	breq	.+10     	; 0x7f4 <__vector_2+0x38>
	{
		EXT_INT0_ISR();
 7ea:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <EXT_INT0_ISR>
 7ee:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <EXT_INT0_ISR+0x1>
 7f2:	09 95       	icall
	}

}
 7f4:	ff 91       	pop	r31
 7f6:	ef 91       	pop	r30
 7f8:	bf 91       	pop	r27
 7fa:	af 91       	pop	r26
 7fc:	9f 91       	pop	r25
 7fe:	8f 91       	pop	r24
 800:	7f 91       	pop	r23
 802:	6f 91       	pop	r22
 804:	5f 91       	pop	r21
 806:	4f 91       	pop	r20
 808:	3f 91       	pop	r19
 80a:	2f 91       	pop	r18
 80c:	0f 90       	pop	r0
 80e:	0f be       	out	0x3f, r0	; 63
 810:	0f 90       	pop	r0
 812:	1f 90       	pop	r1
 814:	18 95       	reti

00000816 <__vector_3>:


/*Interrupt Service Routine for INT2*/
ISR(INT2_vect)
{
 816:	1f 92       	push	r1
 818:	0f 92       	push	r0
 81a:	0f b6       	in	r0, 0x3f	; 63
 81c:	0f 92       	push	r0
 81e:	11 24       	eor	r1, r1
 820:	2f 93       	push	r18
 822:	3f 93       	push	r19
 824:	4f 93       	push	r20
 826:	5f 93       	push	r21
 828:	6f 93       	push	r22
 82a:	7f 93       	push	r23
 82c:	8f 93       	push	r24
 82e:	9f 93       	push	r25
 830:	af 93       	push	r26
 832:	bf 93       	push	r27
 834:	ef 93       	push	r30
 836:	ff 93       	push	r31

	if(EXT_INT2_ISR != NULL)
 838:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <EXT_INT2_ISR>
 83c:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <EXT_INT2_ISR+0x1>
 840:	30 97       	sbiw	r30, 0x00	; 0
 842:	09 f0       	breq	.+2      	; 0x846 <__vector_3+0x30>
	{
		EXT_INT2_ISR();
 844:	09 95       	icall
	}

}
 846:	ff 91       	pop	r31
 848:	ef 91       	pop	r30
 84a:	bf 91       	pop	r27
 84c:	af 91       	pop	r26
 84e:	9f 91       	pop	r25
 850:	8f 91       	pop	r24
 852:	7f 91       	pop	r23
 854:	6f 91       	pop	r22
 856:	5f 91       	pop	r21
 858:	4f 91       	pop	r20
 85a:	3f 91       	pop	r19
 85c:	2f 91       	pop	r18
 85e:	0f 90       	pop	r0
 860:	0f be       	out	0x3f, r0	; 63
 862:	0f 90       	pop	r0
 864:	1f 90       	pop	r1
 866:	18 95       	reti

00000868 <GLOBAL_INTERRUPT_Enable>:


void GLOBAL_INTERRUPT_Enable(void)
{

	set_bit(SREG, 7);
 868:	8f b7       	in	r24, 0x3f	; 63
 86a:	80 68       	ori	r24, 0x80	; 128
 86c:	8f bf       	out	0x3f, r24	; 63
 86e:	08 95       	ret

00000870 <GLOBAL_INTERRUPT_Disable>:
}

void GLOBAL_INTERRUPT_Disable(void)
{

	clr_bit(SREG, 7);
 870:	8f b7       	in	r24, 0x3f	; 63
 872:	8f 77       	andi	r24, 0x7F	; 127
 874:	8f bf       	out	0x3f, r24	; 63
 876:	08 95       	ret

00000878 <EXT_INTERRUPT0_Init>:
}

void EXT_INTERRUPT0_Init(void)
{
	/*Disable global interrupt*/
	GLOBAL_INTERRUPT_Disable();
 878:	0e 94 38 04 	call	0x870	; 0x870 <GLOBAL_INTERRUPT_Disable>

	/*Enable External Interrupt 0*/
	set_bit(GICR, INT0);
 87c:	8b b7       	in	r24, 0x3b	; 59
 87e:	80 64       	ori	r24, 0x40	; 64
 880:	8b bf       	out	0x3b, r24	; 59
		clr_bit(MCUCR, ISC00);
	#elif EXT_INT0_TRIGGER == EXT_INT_TRG_ANY_LOGICAL
		clr_bit(MCUCR, ISC01);
		set_bit(MCUCR, ISC00);
	#elif EXT_INT0_TRIGGER == EXT_INT_TRG_FALLING_EDGE
		set_bit(MCUCR, ISC01);
 882:	85 b7       	in	r24, 0x35	; 53
 884:	82 60       	ori	r24, 0x02	; 2
 886:	85 bf       	out	0x35, r24	; 53
		clr_bit(MCUCR, ISC00);
 888:	85 b7       	in	r24, 0x35	; 53
 88a:	8e 7f       	andi	r24, 0xFE	; 254
 88c:	85 bf       	out	0x35, r24	; 53
		set_bit(MCUCR, ISC01);
		set_bit(MCUCR, ISC00);
	#endif

		/*Enable global interrupt*/
		GLOBAL_INTERRUPT_Enable();
 88e:	0e 94 34 04 	call	0x868	; 0x868 <GLOBAL_INTERRUPT_Enable>
 892:	08 95       	ret

00000894 <TIMER_Init>:

void SET_TMR0_OC_INT_ISR_Handler( ptrFunction handler)
{
	if(handler != NULL)
	{
		TMR0_OC_INT_ISR = handler;
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	00 d0       	rcall	.+0      	; 0x89a <TIMER_Init+0x6>
 89a:	00 d0       	rcall	.+0      	; 0x89c <TIMER_Init+0x8>
 89c:	00 d0       	rcall	.+0      	; 0x89e <TIMER_Init+0xa>
 89e:	cd b7       	in	r28, 0x3d	; 61
 8a0:	de b7       	in	r29, 0x3e	; 62
 8a2:	49 83       	std	Y+1, r20	; 0x01
 8a4:	5a 83       	std	Y+2, r21	; 0x02
 8a6:	6b 83       	std	Y+3, r22	; 0x03
 8a8:	7c 83       	std	Y+4, r23	; 0x04
 8aa:	8d 83       	std	Y+5, r24	; 0x05
 8ac:	9e 83       	std	Y+6, r25	; 0x06
 8ae:	41 11       	cpse	r20, r1
 8b0:	27 c0       	rjmp	.+78     	; 0x900 <TIMER_Init+0x6c>
 8b2:	23 b7       	in	r18, 0x33	; 51
 8b4:	96 2f       	mov	r25, r22
 8b6:	40 e1       	ldi	r20, 0x10	; 16
 8b8:	94 9f       	mul	r25, r20
 8ba:	c0 01       	movw	r24, r0
 8bc:	11 24       	eor	r1, r1
 8be:	87 2b       	or	r24, r23
 8c0:	82 2b       	or	r24, r18
 8c2:	83 bf       	out	0x33, r24	; 51
 8c4:	29 b7       	in	r18, 0x39	; 57
 8c6:	3d 81       	ldd	r19, Y+5	; 0x05
 8c8:	9e 81       	ldd	r25, Y+6	; 0x06
 8ca:	89 2f       	mov	r24, r25
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	88 0f       	add	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	83 2b       	or	r24, r19
 8d4:	82 2b       	or	r24, r18
 8d6:	89 bf       	out	0x39, r24	; 57
 8d8:	8d 81       	ldd	r24, Y+5	; 0x05
 8da:	81 11       	cpse	r24, r1
 8dc:	03 c0       	rjmp	.+6      	; 0x8e4 <TIMER_Init+0x50>
 8de:	8e 81       	ldd	r24, Y+6	; 0x06
 8e0:	88 23       	and	r24, r24
 8e2:	19 f0       	breq	.+6      	; 0x8ea <TIMER_Init+0x56>
 8e4:	8f b7       	in	r24, 0x3f	; 63
 8e6:	80 68       	ori	r24, 0x80	; 128
 8e8:	8f bf       	out	0x3f, r24	; 63
 8ea:	8a 81       	ldd	r24, Y+2	; 0x02
 8ec:	88 23       	and	r24, r24
 8ee:	29 f0       	breq	.+10     	; 0x8fa <TIMER_Init+0x66>
 8f0:	81 30       	cpi	r24, 0x01	; 1
 8f2:	31 f4       	brne	.+12     	; 0x900 <TIMER_Init+0x6c>
 8f4:	83 b7       	in	r24, 0x33	; 51
 8f6:	83 bf       	out	0x33, r24	; 51
 8f8:	03 c0       	rjmp	.+6      	; 0x900 <TIMER_Init+0x6c>
 8fa:	83 b7       	in	r24, 0x33	; 51
 8fc:	88 60       	ori	r24, 0x08	; 8
 8fe:	83 bf       	out	0x33, r24	; 51
 900:	26 96       	adiw	r28, 0x06	; 6
 902:	0f b6       	in	r0, 0x3f	; 63
 904:	f8 94       	cli
 906:	de bf       	out	0x3e, r29	; 62
 908:	0f be       	out	0x3f, r0	; 63
 90a:	cd bf       	out	0x3d, r28	; 61
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	08 95       	ret

00000912 <TIMER_Set_Counter_Value>:
 912:	81 11       	cpse	r24, r1
 914:	01 c0       	rjmp	.+2      	; 0x918 <TIMER_Set_Counter_Value+0x6>
 916:	62 bf       	out	0x32, r22	; 50
 918:	08 95       	ret

0000091a <__vector_11>:
 91a:	1f 92       	push	r1
 91c:	0f 92       	push	r0
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	0f 92       	push	r0
 922:	11 24       	eor	r1, r1
 924:	2f 93       	push	r18
 926:	3f 93       	push	r19
 928:	4f 93       	push	r20
 92a:	5f 93       	push	r21
 92c:	6f 93       	push	r22
 92e:	7f 93       	push	r23
 930:	8f 93       	push	r24
 932:	9f 93       	push	r25
 934:	af 93       	push	r26
 936:	bf 93       	push	r27
 938:	ef 93       	push	r30
 93a:	ff 93       	push	r31
 93c:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <TMR0_OVF_INT_ISR>
 940:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <TMR0_OVF_INT_ISR+0x1>
 944:	30 97       	sbiw	r30, 0x00	; 0
 946:	09 f0       	breq	.+2      	; 0x94a <__vector_11+0x30>
 948:	09 95       	icall
 94a:	ff 91       	pop	r31
 94c:	ef 91       	pop	r30
 94e:	bf 91       	pop	r27
 950:	af 91       	pop	r26
 952:	9f 91       	pop	r25
 954:	8f 91       	pop	r24
 956:	7f 91       	pop	r23
 958:	6f 91       	pop	r22
 95a:	5f 91       	pop	r21
 95c:	4f 91       	pop	r20
 95e:	3f 91       	pop	r19
 960:	2f 91       	pop	r18
 962:	0f 90       	pop	r0
 964:	0f be       	out	0x3f, r0	; 63
 966:	0f 90       	pop	r0
 968:	1f 90       	pop	r1
 96a:	18 95       	reti

0000096c <__vector_10>:
	}
}

ISR(TIMER0_COMP_vect)
{
 96c:	1f 92       	push	r1
 96e:	0f 92       	push	r0
 970:	0f b6       	in	r0, 0x3f	; 63
 972:	0f 92       	push	r0
 974:	11 24       	eor	r1, r1
 976:	2f 93       	push	r18
 978:	3f 93       	push	r19
 97a:	4f 93       	push	r20
 97c:	5f 93       	push	r21
 97e:	6f 93       	push	r22
 980:	7f 93       	push	r23
 982:	8f 93       	push	r24
 984:	9f 93       	push	r25
 986:	af 93       	push	r26
 988:	bf 93       	push	r27
 98a:	ef 93       	push	r30
 98c:	ff 93       	push	r31
	if(TMR0_OC_INT_ISR != NULL)
 98e:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <TMR0_OC_INT_ISR>
 992:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <TMR0_OC_INT_ISR+0x1>
 996:	30 97       	sbiw	r30, 0x00	; 0
 998:	09 f0       	breq	.+2      	; 0x99c <__vector_10+0x30>
	{
		TMR0_OC_INT_ISR();
 99a:	09 95       	icall
	}
}
 99c:	ff 91       	pop	r31
 99e:	ef 91       	pop	r30
 9a0:	bf 91       	pop	r27
 9a2:	af 91       	pop	r26
 9a4:	9f 91       	pop	r25
 9a6:	8f 91       	pop	r24
 9a8:	7f 91       	pop	r23
 9aa:	6f 91       	pop	r22
 9ac:	5f 91       	pop	r21
 9ae:	4f 91       	pop	r20
 9b0:	3f 91       	pop	r19
 9b2:	2f 91       	pop	r18
 9b4:	0f 90       	pop	r0
 9b6:	0f be       	out	0x3f, r0	; 63
 9b8:	0f 90       	pop	r0
 9ba:	1f 90       	pop	r1
 9bc:	18 95       	reti

000009be <ltoa>:
 9be:	25 32       	cpi	r18, 0x25	; 37
 9c0:	31 05       	cpc	r19, r1
 9c2:	20 f4       	brcc	.+8      	; 0x9cc <ltoa+0xe>
 9c4:	22 30       	cpi	r18, 0x02	; 2
 9c6:	10 f0       	brcs	.+4      	; 0x9cc <ltoa+0xe>
 9c8:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__ltoa_ncheck>
 9cc:	fa 01       	movw	r30, r20
 9ce:	10 82       	st	Z, r1
 9d0:	ca 01       	movw	r24, r20
 9d2:	08 95       	ret

000009d4 <__ltoa_ncheck>:
 9d4:	bb 27       	eor	r27, r27
 9d6:	2a 30       	cpi	r18, 0x0A	; 10
 9d8:	51 f4       	brne	.+20     	; 0x9ee <__ltoa_ncheck+0x1a>
 9da:	99 23       	and	r25, r25
 9dc:	42 f4       	brpl	.+16     	; 0x9ee <__ltoa_ncheck+0x1a>
 9de:	bd e2       	ldi	r27, 0x2D	; 45
 9e0:	90 95       	com	r25
 9e2:	80 95       	com	r24
 9e4:	70 95       	com	r23
 9e6:	61 95       	neg	r22
 9e8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ea:	8f 4f       	sbci	r24, 0xFF	; 255
 9ec:	9f 4f       	sbci	r25, 0xFF	; 255
 9ee:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__ultoa_common>

000009f2 <__ultoa_ncheck>:
 9f2:	bb 27       	eor	r27, r27

000009f4 <__ultoa_common>:
 9f4:	fa 01       	movw	r30, r20
 9f6:	a6 2f       	mov	r26, r22
 9f8:	62 17       	cp	r22, r18
 9fa:	71 05       	cpc	r23, r1
 9fc:	81 05       	cpc	r24, r1
 9fe:	91 05       	cpc	r25, r1
 a00:	33 0b       	sbc	r19, r19
 a02:	30 fb       	bst	r19, 0
 a04:	66 f0       	brts	.+24     	; 0xa1e <__ultoa_common+0x2a>
 a06:	aa 27       	eor	r26, r26
 a08:	66 0f       	add	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	aa 1f       	adc	r26, r26
 a12:	a2 17       	cp	r26, r18
 a14:	10 f0       	brcs	.+4      	; 0xa1a <__ultoa_common+0x26>
 a16:	a2 1b       	sub	r26, r18
 a18:	63 95       	inc	r22
 a1a:	38 50       	subi	r19, 0x08	; 8
 a1c:	a9 f7       	brne	.-22     	; 0xa08 <__ultoa_common+0x14>
 a1e:	a0 5d       	subi	r26, 0xD0	; 208
 a20:	aa 33       	cpi	r26, 0x3A	; 58
 a22:	08 f0       	brcs	.+2      	; 0xa26 <__ultoa_common+0x32>
 a24:	a9 5d       	subi	r26, 0xD9	; 217
 a26:	a1 93       	st	Z+, r26
 a28:	36 f7       	brtc	.-52     	; 0x9f6 <__ultoa_common+0x2>
 a2a:	b1 11       	cpse	r27, r1
 a2c:	b1 93       	st	Z+, r27
 a2e:	10 82       	st	Z, r1
 a30:	ca 01       	movw	r24, r20
 a32:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <strrev>

00000a36 <strrev>:
 a36:	dc 01       	movw	r26, r24
 a38:	fc 01       	movw	r30, r24
 a3a:	67 2f       	mov	r22, r23
 a3c:	71 91       	ld	r23, Z+
 a3e:	77 23       	and	r23, r23
 a40:	e1 f7       	brne	.-8      	; 0xa3a <strrev+0x4>
 a42:	32 97       	sbiw	r30, 0x02	; 2
 a44:	04 c0       	rjmp	.+8      	; 0xa4e <strrev+0x18>
 a46:	7c 91       	ld	r23, X
 a48:	6d 93       	st	X+, r22
 a4a:	70 83       	st	Z, r23
 a4c:	62 91       	ld	r22, -Z
 a4e:	ae 17       	cp	r26, r30
 a50:	bf 07       	cpc	r27, r31
 a52:	c8 f3       	brcs	.-14     	; 0xa46 <strrev+0x10>
 a54:	08 95       	ret

00000a56 <_exit>:
 a56:	f8 94       	cli

00000a58 <__stop_program>:
 a58:	ff cf       	rjmp	.-2      	; 0xa58 <__stop_program>
